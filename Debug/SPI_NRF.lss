
SPI_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000004bc  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000198d  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  00002061  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000997  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000666  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a11  00000000  00000000  00003c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000467f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	
int main(void)
{
	uint8_t txrxrole = 0; // 1 transmitter 0 receiver
	/*Initialize SPI*/
	SPI_MasterInit();
  a6:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_MasterInit>
	//init nrf24l01
	nrf24l01_init();
  aa:	0e 94 90 01 	call	0x320	; 0x320 <nrf24l01_init>
	/*Enable Global Interrupt Bit*/
	sei();
  ae:	78 94       	sei
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0xa>

000000b2 <nrf24l01_readregister>:

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
  b2:	29 98       	cbi	0x05, 1	; 5
  b4:	8f 71       	andi	r24, 0x1F	; 31
  b6:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
  c0:	29 9a       	sbi	0x05, 1	; 5
  c2:	08 95       	ret

000000c4 <nrf24l01_writeregister>:
  c4:	cf 93       	push	r28
  c6:	c6 2f       	mov	r28, r22
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	8f 71       	andi	r24, 0x1F	; 31
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
  d2:	8c 2f       	mov	r24, r28
  d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
  d8:	29 9a       	sbi	0x05, 1	; 5
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <nrf24l01_writeregisters>:
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	7b 01       	movw	r14, r22
  ec:	14 2f       	mov	r17, r20
  ee:	29 98       	cbi	0x05, 1	; 5
  f0:	8f 71       	andi	r24, 0x1F	; 31
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
  f8:	11 23       	and	r17, r17
  fa:	71 f0       	breq	.+28     	; 0x118 <nrf24l01_writeregisters+0x3a>
  fc:	e7 01       	movw	r28, r14
  fe:	11 50       	subi	r17, 0x01	; 1
 100:	01 2f       	mov	r16, r17
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	0f 5f       	subi	r16, 0xFF	; 255
 106:	1f 4f       	sbci	r17, 0xFF	; 255
 108:	0e 0d       	add	r16, r14
 10a:	1f 1d       	adc	r17, r15
 10c:	89 91       	ld	r24, Y+
 10e:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
 112:	c0 17       	cp	r28, r16
 114:	d1 07       	cpc	r29, r17
 116:	d1 f7       	brne	.-12     	; 0x10c <nrf24l01_writeregisters+0x2e>
 118:	29 9a       	sbi	0x05, 1	; 5
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	08 95       	ret

00000128 <nrf24l01_revaddress>:
 128:	fc 01       	movw	r30, r24
 12a:	35 96       	adiw	r30, 0x05	; 5
 12c:	a6 2f       	mov	r26, r22
 12e:	b7 2f       	mov	r27, r23
 130:	9c 01       	movw	r18, r24
 132:	92 91       	ld	r25, -Z
 134:	9d 93       	st	X+, r25
 136:	e2 17       	cp	r30, r18
 138:	f3 07       	cpc	r31, r19
 13a:	d9 f7       	brne	.-10     	; 0x132 <nrf24l01_revaddress+0xa>
 13c:	08 95       	ret

0000013e <nrf24l01_setrxaddr>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	00 d0       	rcall	.+0      	; 0x144 <nrf24l01_setrxaddr+0x6>
 144:	00 d0       	rcall	.+0      	; 0x146 <nrf24l01_setrxaddr+0x8>
 146:	1f 92       	push	r1
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	9b 01       	movw	r18, r22
 14e:	81 11       	cpse	r24, r1
 150:	16 c0       	rjmp	.+44     	; 0x17e <nrf24l01_setrxaddr+0x40>
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	fb 01       	movw	r30, r22
 156:	ae e1       	ldi	r26, 0x1E	; 30
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <nrf24l01_setrxaddr+0x1c>
 162:	be 01       	movw	r22, r28
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	c9 01       	movw	r24, r18
 16a:	0e 94 94 00 	call	0x128	; 0x128 <nrf24l01_revaddress>
 16e:	45 e0       	ldi	r20, 0x05	; 5
 170:	be 01       	movw	r22, r28
 172:	6f 5f       	subi	r22, 0xFF	; 255
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	0e 94 6f 00 	call	0xde	; 0xde <nrf24l01_writeregisters>
 17c:	56 c0       	rjmp	.+172    	; 0x22a <nrf24l01_setrxaddr+0xec>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	b1 f4       	brne	.+44     	; 0x1ae <nrf24l01_setrxaddr+0x70>
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	fb 01       	movw	r30, r22
 186:	a9 e1       	ldi	r26, 0x19	; 25
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 90       	ld	r0, Z+
 18c:	0d 92       	st	X+, r0
 18e:	8a 95       	dec	r24
 190:	e1 f7       	brne	.-8      	; 0x18a <nrf24l01_setrxaddr+0x4c>
 192:	be 01       	movw	r22, r28
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	c9 01       	movw	r24, r18
 19a:	0e 94 94 00 	call	0x128	; 0x128 <nrf24l01_revaddress>
 19e:	45 e0       	ldi	r20, 0x05	; 5
 1a0:	be 01       	movw	r22, r28
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	0e 94 6f 00 	call	0xde	; 0xde <nrf24l01_writeregisters>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <nrf24l01_setrxaddr+0xec>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	71 f4       	brne	.+28     	; 0x1ce <nrf24l01_setrxaddr+0x90>
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	fb 01       	movw	r30, r22
 1b6:	a4 e1       	ldi	r26, 0x14	; 20
 1b8:	b1 e0       	ldi	r27, 0x01	; 1
 1ba:	01 90       	ld	r0, Z+
 1bc:	0d 92       	st	X+, r0
 1be:	8a 95       	dec	r24
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <nrf24l01_setrxaddr+0x7c>
 1c2:	fb 01       	movw	r30, r22
 1c4:	64 81       	ldd	r22, Z+4	; 0x04
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 1cc:	2e c0       	rjmp	.+92     	; 0x22a <nrf24l01_setrxaddr+0xec>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	71 f4       	brne	.+28     	; 0x1ee <nrf24l01_setrxaddr+0xb0>
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	fb 01       	movw	r30, r22
 1d6:	af e0       	ldi	r26, 0x0F	; 15
 1d8:	b1 e0       	ldi	r27, 0x01	; 1
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <nrf24l01_setrxaddr+0x9c>
 1e2:	fb 01       	movw	r30, r22
 1e4:	64 81       	ldd	r22, Z+4	; 0x04
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <nrf24l01_setrxaddr+0xec>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	71 f4       	brne	.+28     	; 0x20e <nrf24l01_setrxaddr+0xd0>
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	fb 01       	movw	r30, r22
 1f6:	aa e0       	ldi	r26, 0x0A	; 10
 1f8:	b1 e0       	ldi	r27, 0x01	; 1
 1fa:	01 90       	ld	r0, Z+
 1fc:	0d 92       	st	X+, r0
 1fe:	8a 95       	dec	r24
 200:	e1 f7       	brne	.-8      	; 0x1fa <nrf24l01_setrxaddr+0xbc>
 202:	fb 01       	movw	r30, r22
 204:	64 81       	ldd	r22, Z+4	; 0x04
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 20c:	0e c0       	rjmp	.+28     	; 0x22a <nrf24l01_setrxaddr+0xec>
 20e:	85 30       	cpi	r24, 0x05	; 5
 210:	61 f4       	brne	.+24     	; 0x22a <nrf24l01_setrxaddr+0xec>
 212:	fb 01       	movw	r30, r22
 214:	a5 e0       	ldi	r26, 0x05	; 5
 216:	b1 e0       	ldi	r27, 0x01	; 1
 218:	01 90       	ld	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	8a 95       	dec	r24
 21e:	e1 f7       	brne	.-8      	; 0x218 <nrf24l01_setrxaddr+0xda>
 220:	fb 01       	movw	r30, r22
 222:	64 81       	ldd	r22, Z+4	; 0x04
 224:	8f e0       	ldi	r24, 0x0F	; 15
 226:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <nrf24l01_settxaddr>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <nrf24l01_settxaddr+0x6>
 240:	00 d0       	rcall	.+0      	; 0x242 <nrf24l01_settxaddr+0x8>
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	25 e0       	ldi	r18, 0x05	; 5
 24a:	fc 01       	movw	r30, r24
 24c:	a0 e0       	ldi	r26, 0x00	; 0
 24e:	b1 e0       	ldi	r27, 0x01	; 1
 250:	01 90       	ld	r0, Z+
 252:	0d 92       	st	X+, r0
 254:	2a 95       	dec	r18
 256:	e1 f7       	brne	.-8      	; 0x250 <nrf24l01_settxaddr+0x16>
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	0e 94 94 00 	call	0x128	; 0x128 <nrf24l01_revaddress>
 262:	45 e0       	ldi	r20, 0x05	; 5
 264:	be 01       	movw	r22, r28
 266:	6f 5f       	subi	r22, 0xFF	; 255
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	0e 94 6f 00 	call	0xde	; 0xde <nrf24l01_writeregisters>
 270:	45 e0       	ldi	r20, 0x05	; 5
 272:	be 01       	movw	r22, r28
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	80 e1       	ldi	r24, 0x10	; 16
 27a:	0e 94 6f 00 	call	0xde	; 0xde <nrf24l01_writeregisters>
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <nrf24l01_flushRXfifo>:
 28e:	29 98       	cbi	0x05, 1	; 5
 290:	82 ee       	ldi	r24, 0xE2	; 226
 292:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
 296:	29 9a       	sbi	0x05, 1	; 5
 298:	08 95       	ret

0000029a <nrf24l01_flushTXfifo>:
 29a:	29 98       	cbi	0x05, 1	; 5
 29c:	81 ee       	ldi	r24, 0xE1	; 225
 29e:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
 2a2:	29 9a       	sbi	0x05, 1	; 5
 2a4:	08 95       	ret

000002a6 <nrf24l01_setRX>:
 2a6:	6e e1       	ldi	r22, 0x1E	; 30
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 2b6:	68 2f       	mov	r22, r24
 2b8:	61 60       	ori	r22, 0x01	; 1
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 2c6:	68 2f       	mov	r22, r24
 2c8:	62 60       	ori	r22, 0x02	; 2
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 2d0:	60 e7       	ldi	r22, 0x70	; 112
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 2d8:	0e 94 47 01 	call	0x28e	; 0x28e <nrf24l01_flushRXfifo>
 2dc:	0e 94 4d 01 	call	0x29a	; 0x29a <nrf24l01_flushTXfifo>
 2e0:	28 9a       	sbi	0x05, 0	; 5
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <nrf24l01_setRX+0x3e>
 2e8:	08 95       	ret

000002ea <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
 2f0:	68 2f       	mov	r22, r24
 2f2:	66 60       	ori	r22, 0x06	; 6
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 2fa:	08 95       	ret

000002fc <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
 302:	68 2f       	mov	r22, r24
 304:	67 7d       	andi	r22, 0xD7	; 215
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 30c:	08 95       	ret

0000030e <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
	  config |= (1<<NRF24L01_REG_CRCO);
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
 314:	68 2f       	mov	r22, r24
 316:	6c 60       	ori	r22, 0x0C	; 12
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
 31e:	08 95       	ret

00000320 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
 320:	21 9a       	sbi	0x04, 1	; 4
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
 322:	20 9a       	sbi	0x04, 0	; 4

    SPI_MasterInit(); //init spi
 324:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_MasterInit>

    nrf24l01_CElo; //low CE
 328:	28 98       	cbi	0x05, 0	; 5
    nrf24l01_CSNhi; //high CSN
 32a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	81 ee       	ldi	r24, 0xE1	; 225
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <nrf24l01_init+0x10>
 334:	00 c0       	rjmp	.+0      	; 0x336 <nrf24l01_init+0x16>
 336:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
 338:	0e 94 75 01 	call	0x2ea	; 0x2ea <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
 33c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
 340:	0e 94 87 01 	call	0x30e	; 0x30e <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
 344:	67 e4       	ldi	r22, 0x47	; 71
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	8c e1       	ldi	r24, 0x1C	; 28
 350:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
 354:	6c e4       	ldi	r22, 0x4C	; 76
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
 35c:	60 e1       	ldi	r22, 0x10	; 16
 35e:	81 e1       	ldi	r24, 0x11	; 17
 360:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
 364:	60 e1       	ldi	r22, 0x10	; 16
 366:	82 e1       	ldi	r24, 0x12	; 18
 368:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
 36c:	60 e1       	ldi	r22, 0x10	; 16
 36e:	83 e1       	ldi	r24, 0x13	; 19
 370:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
 374:	60 e1       	ldi	r22, 0x10	; 16
 376:	84 e1       	ldi	r24, 0x14	; 20
 378:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
 37c:	60 e1       	ldi	r22, 0x10	; 16
 37e:	85 e1       	ldi	r24, 0x15	; 21
 380:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
 384:	60 e1       	ldi	r22, 0x10	; 16
 386:	86 e1       	ldi	r24, 0x16	; 22
 388:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 39a:	68 2f       	mov	r22, r24
 39c:	61 60       	ori	r22, 0x01	; 1
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 3aa:	68 2f       	mov	r22, r24
 3ac:	62 60       	ori	r22, 0x02	; 2
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 3ba:	68 2f       	mov	r22, r24
 3bc:	64 60       	ori	r22, 0x04	; 4
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 3ca:	68 2f       	mov	r22, r24
 3cc:	68 60       	ori	r22, 0x08	; 8
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 3da:	68 2f       	mov	r22, r24
 3dc:	60 61       	ori	r22, 0x10	; 16
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 3ea:	68 2f       	mov	r22, r24
 3ec:	60 62       	ori	r22, 0x20	; 32
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 3fa:	68 2f       	mov	r22, r24
 3fc:	61 60       	ori	r22, 0x01	; 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 40a:	68 2f       	mov	r22, r24
 40c:	62 60       	ori	r22, 0x02	; 2
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 41a:	68 2f       	mov	r22, r24
 41c:	64 60       	ori	r22, 0x04	; 4
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 42a:	68 2f       	mov	r22, r24
 42c:	68 60       	ori	r22, 0x08	; 8
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 43a:	68 2f       	mov	r22, r24
 43c:	60 61       	ori	r22, 0x10	; 16
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 59 00 	call	0xb2	; 0xb2 <nrf24l01_readregister>
 44a:	68 2f       	mov	r22, r24
 44c:	60 62       	ori	r22, 0x20	; 32
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 62 00 	call	0xc4	; 0xc4 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
 454:	6e e1       	ldi	r22, 0x1E	; 30
 456:	71 e0       	ldi	r23, 0x01	; 1
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
 45e:	69 e1       	ldi	r22, 0x19	; 25
 460:	71 e0       	ldi	r23, 0x01	; 1
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
 468:	64 e1       	ldi	r22, 0x14	; 20
 46a:	71 e0       	ldi	r23, 0x01	; 1
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
 472:	6f e0       	ldi	r22, 0x0F	; 15
 474:	71 e0       	ldi	r23, 0x01	; 1
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
 47c:	6a e0       	ldi	r22, 0x0A	; 10
 47e:	71 e0       	ldi	r23, 0x01	; 1
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
 486:	65 e0       	ldi	r22, 0x05	; 5
 488:	71 e0       	ldi	r23, 0x01	; 1
 48a:	85 e0       	ldi	r24, 0x05	; 5
 48c:	0e 94 9f 00 	call	0x13e	; 0x13e <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 1d 01 	call	0x23a	; 0x23a <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
 498:	0e 94 53 01 	call	0x2a6	; 0x2a6 <nrf24l01_setRX>
 49c:	08 95       	ret

0000049e <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK);
 49e:	88 e2       	ldi	r24, 0x28	; 40
 4a0:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 4a2:	81 e5       	ldi	r24, 0x51	; 81
 4a4:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X); // Double SPI Speed Bit
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	8d bd       	out	0x2d, r24	; 45
 4aa:	08 95       	ret

000004ac <SPI_MasterTransmit>:
}

char SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 4ac:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 4ae:	0d b4       	in	r0, 0x2d	; 45
 4b0:	07 fe       	sbrs	r0, 7
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <SPI_MasterTransmit+0x2>
	/*Return Data In case of Receiving*/
	return SPDR;
 4b4:	8e b5       	in	r24, 0x2e	; 46
}
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
